from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import webbrowser
import subprocess
import pyautogui
import platform
import requests
import keyboard
import logging
import getpass
import psutil
import socket
import config
import distro
import time
import os

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

markup1 = ReplyKeyboardMarkup(resize_keyboard=True)
btn1_1 = KeyboardButton("/screenshot")
btn1_2 = KeyboardButton("/shutdown")
btn1_3 = KeyboardButton("/restart")
btn1_4 = KeyboardButton("/ytfull")
btn1_5 = KeyboardButton("/ytnext")
btn1_6 = KeyboardButton("/status")
btn1_7 = KeyboardButton("/ip")
btn1_8 = KeyboardButton("/yt")
btn1_9 = KeyboardButton("/start")
btn1_10 = KeyboardButton("/remove")
markup1.row(btn1_9, btn1_10)
markup1.row(btn1_1, btn1_2)
markup1.row(btn1_3, btn1_4)
markup1.row(btn1_5, btn1_6)
markup1.row(btn1_7, btn1_8)

markup2 = ReplyKeyboardMarkup(resize_keyboard=True)
btn2_1 = KeyboardButton("üì∏–°–∫—Ä–∏–Ω—à–æ—Ç")
btn2_2 = KeyboardButton("üìµ–í—ã–∫–ª—é—á–∏—Ç—å")
btn2_3 = KeyboardButton("‚ôªÔ∏è–†–µ—Å—Ç–∞—Ä—Ç")
btn2_4 = KeyboardButton("üî∞–ê–π–ø–∏")
btn2_5 = KeyboardButton("üèß–°—Ç–∞—Ç—É—Å")
markup2.row(btn1_9)
markup2.row(btn2_2, btn2_3)
markup2.row(btn2_4, btn2_5)
markup2.row(btn2_1)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.from_user.id in config.IDS:
        await message.reply("""–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/screenshot - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –ü–ö
/pkeyboard - –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º–∞–Ω–¥
/ckeyboard - –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥
/shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö
/restart - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö
/ytfull - –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–± –Ω–∞ –ü–ö)
/ytnext - —Å–ª–µ–¥—É–π—â–µ–µ –≤–∏–¥–µ–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–± –Ω–∞ –ü–ö)
/status - —Å—Ç–∞—Ç—É—Å –ü–ö
/remove - —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/input [question] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º
/url [htpps://url] - –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ
/msg [text] - –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ü–ö
/ip - —É–∑–Ω–∞—Ç—å –∞–π–ø–∏
/yt - –æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–±""")

@dp.message_handler()
async def keyboard(message: types.Message):
    if message.from_user.id in config.IDS:
        txt = message.text
        if txt == 'üì∏–°–∫—Ä–∏–Ω—à–æ—Ç':
            filename = f"{time.time()}.jpg"
            pyautogui.screenshot(filename)
            with open(filename, "rb") as img:
                await bot.send_photo(message.chat.id, img)
            os.remove(filename)
        elif txt == 'üìµ–í—ã–∫–ª—é—á–∏—Ç—å':
            if platform.system() == "Windows":
                subprocess.call('shutdown /s')
            else:
                subprocess.call('shutdown -h now')
            await message.reply("–í—ã–∫–ª—é—á–µ–Ω–∏–µ")
        elif txt == '‚ôªÔ∏è–†–µ—Å—Ç–∞—Ä—Ç':
            if platform.system() == "Windows":
                subprocess.call('shutdown /r')
            else:
                subprocess.call('reboot')
        elif txt == 'üî∞–ê–π–ø–∏':
            a = requests.get("http://jsonip.com/").json()
            await message.reply(f"–ê–π–ø–∏: {a['ip']}")
        elif txt == 'üèß–°—Ç–∞—Ç—É—Å':
            text = ""
            text += "–ò–º—è –∫–æ–º–ø–∞: " + socket.gethostname()
            text += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + getpass.getuser()
            if platform.system() == "Windows":
                text += "\nOS: Windows " + platform.win32_ver()[0]
            else:
                text += "\nOS: " + " ".join(distro.linux_distribution()[:2])
            text += "\nCPU: " + str(psutil.cpu_percent()) + "%"
            text += "\n–û–ó–£: " + str(
                int(psutil.virtual_memory().percent)) + "%"
            if psutil.sensors_battery():
                if psutil.sensors_battery().power_plugged is True:
                    text += "\n–ó–∞—Ä—è–¥: " + str(
                        format(psutil.sensors_battery().percent, ".0f")) \
                            + "% | –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è"
                else:
                    text += "\n–ë–∞—Ç–∞—Ä–µ—è: " + str(
                        format(psutil.sensors_battery().percent, ".0f")) + "%"
            await message.reply(f"{text}")
        elif txt == '/ckeyboard':
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=markup1)
        elif txt == '/pkeyboard':
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=markup2)
        elif txt == '/ip':
            a = requests.get("http://jsonip.com/").json()
            await message.reply(f"–ê–π–ø–∏: {a['ip']}")
        elif txt == '/screenshot':
            filename = f"{time.time()}.jpg"
            pyautogui.screenshot(filename)
            with open(filename, "rb") as img:
                await bot.send_photo(message.chat.id, img)
            os.remove(filename)
        elif txt == '/msg':
            msg = message.text[5:]
            if msg == " ":
                await message.reply("–£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            else:
                pyautogui.alert(msg, "~") 
                await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        elif txt == '/input':
            input = message.text[7:]
            if input == " ":
                await message.reply("–£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            else:
                try:
                    answer = pyautogui.prompt(input, "~")
                    await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    await bot.send_message(message.chat.id, answer)
                except Exception:
                    await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
        elif txt == '/status':
            text = ""
            text += "–ò–º—è –∫–æ–º–ø–∞: " + socket.gethostname()
            text += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + getpass.getuser()
            if platform.system() == "Windows":
                text += "\nOS: Windows " + platform.win32_ver()[0]
            else:
                text += "\nOS: " + " ".join(distro.linux_distribution()[:2])
            text += "\nCPU: " + str(psutil.cpu_percent()) + "%"
            text += "\n–û–ó–£: " + str(
                int(psutil.virtual_memory().percent)) + "%"
            if psutil.sensors_battery():
                if psutil.sensors_battery().power_plugged is True:
                    text += "\n–ó–∞—Ä—è–¥: " + str(
                        format(psutil.sensors_battery().percent, ".0f")) \
                            + "% | –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è"
                else:
                    text += "\n–ë–∞—Ç–∞—Ä–µ—è: " + str(
                        format(psutil.sensors_battery().percent, ".0f")) + "%"
            await message.reply(f"{text}")
        elif txt == '/ytnext':
            keyboard.send('shift+n')
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        elif txt == '/ytfull':
            keyboard.send('f')
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        elif txt == '/close':
            keyboard.send('alt+f4')
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        elif txt == '/shutdown':
            if platform.system() == "Windows":
                subprocess.call('shutdown /s')
            else:
                subprocess.call('shutdown -h now')
            await message.reply("–í—ã–∫–ª—é—á–µ–Ω–∏–µ")
        elif txt == '/restart':
            if platform.system() == "Windows":
                subprocess.call('shutdown /r')
            else:
                subprocess.call('reboot')
        elif txt == '/url':
            url = message.text[5:]
            if url == " ":
                await message.reply("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É")
            else:
                webbrowser.open(url)
                await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        elif txt == '/yt':
            webbrowser.open('https://www.youtube.com')
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        elif txt == '/start':
            await message.reply("""–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/screenshot - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –ü–ö
/pkeyboard - –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º–∞–Ω–¥
/ckeyboard - –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥
/shutdown - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö
/restart - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö
/ytfull - –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–± –Ω–∞ –ü–ö)
/ytnext - —Å–ª–µ–¥—É–π—â–µ–µ –≤–∏–¥–µ–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–± –Ω–∞ –ü–ö)
/status - —Å—Ç–∞—Ç—É—Å –ü–ö
/input [question] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º
/url [htpps://url] - –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ
/msg [text] - –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ü–ö
/id - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
/ip - —É–∑–Ω–∞—Ç—å –∞–π–ø–∏
/yt - –æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–±""")
        elif message.text == '/id':
            await message.reply(f'–¢–≤–æ–π ID: `{message.from_user.id}`', parse_mode='MarkdownV2')
        elif txt =='/remove':
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    elif message.from_user.id not in config.IDS:
        if message.text == '/id':
            await message.reply(f'–¢–≤–æ–π ID: `{message.from_user.id}`', parse_mode='MarkdownV2')
        else:
            await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
